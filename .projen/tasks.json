{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "nx build @text-to-sql-with-athena-and-snowflake/infrastructure",
          "receiveArgs": true
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "steps": [
        {
          "exec": "nx deploy @text-to-sql-with-athena-and-snowflake/infrastructure",
          "receiveArgs": true
        }
      ]
    },
    "destroy": {
      "name": "destroy",
      "steps": [
        {
          "exec": "nx destroy @text-to-sql-with-athena-and-snowflake/infrastructure",
          "receiveArgs": true
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "generate-key-pair": {
      "name": "generate-key-pair",
      "steps": [
        {
          "exec": "mkdir -p ./key-pair",
          "cwd": "/Users/awsgalen/IdeaProjects/text-to-sql-with-athena-and-snowflake"
        },
        {
          "say": "Generating private key",
          "exec": "openssl genrsa 2048 | openssl pkcs8 -topk8 -v2 des3 -inform PEM -out snowflake.p8 -passout pass:'' -passin pass:'' -nocrypt",
          "cwd": "/Users/awsgalen/IdeaProjects/text-to-sql-with-athena-and-snowflake/key-pair"
        },
        {
          "say": "Generating public key",
          "exec": "openssl rsa -in snowflake.p8 -pubout -out snowflake.pub -passin pass:''",
          "cwd": "/Users/awsgalen/IdeaProjects/text-to-sql-with-athena-and-snowflake/key-pair"
        },
        {
          "say": "Store this value in your SSM Parameter",
          "exec": "cat snowflake.p8",
          "cwd": "/Users/awsgalen/IdeaProjects/text-to-sql-with-athena-and-snowflake/key-pair"
        },
        {
          "say": "Assign this value to your snowflake user (https://docs.snowflake.com/en/user-guide/key-pair-auth#assign-the-public-key-to-a-snowflake-user)",
          "exec": "cat snowflake.pub",
          "cwd": "/Users/awsgalen/IdeaProjects/text-to-sql-with-athena-and-snowflake/key-pair"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "mv $(pnpm pack) dist/js/"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "prettier": {
      "name": "prettier",
      "steps": [
        {
          "exec": "nx prettier @text-to-sql-with-athena-and-snowflake/infrastructure",
          "receiveArgs": true
        }
      ]
    },
    "synth": {
      "name": "synth",
      "steps": [
        {
          "exec": "nx synth @text-to-sql-with-athena-and-snowflake/infrastructure",
          "receiveArgs": true
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests"
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "pnpm dlx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@npmcli/arborist,@types/npm-packlist,@types/npmcli__arborist,prettier,projen,ts-node,typescript"
        },
        {
          "exec": "pnpm i --no-frozen-lockfile"
        },
        {
          "exec": "pnpm update @npmcli/arborist @nrwl/devkit @nrwl/workspace @types/node @types/npm-packlist @types/npmcli__arborist constructs nx prettier projen ts-node typescript"
        },
        {
          "exec": "pnpm dlx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"pnpm dlx projen\"."
}
